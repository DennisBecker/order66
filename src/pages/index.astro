---
import { getCollection } from 'astro:content';
import Layout from '../components/Layout.astro';
import StatCard from '../components/StatCard.astro';
import ChartContainer from '../components/ChartContainer.astro';
import FilterControls from '../components/FilterControls.astro';
import PlayerTable from '../components/PlayerTable.astro';
import RaidTable from '../components/RaidTable.astro';
import '../styles/global.css';

const allRaids = await getCollection('raids');

const sortedRaids = allRaids.sort((a, b) => new Date(a.data.date).getTime() - new Date(b.data.date).getTime());

const allRaidData = sortedRaids.map(raid => ({
  date: raid.data.date,
  file: raid.data.filename,
  data: raid.data.players.map(player => ({
    ...player,
    raidDate: raid.data.date
  }))
}));

const baseUrl = import.meta.env.BASE_URL;
---

<Layout title="Order 66 Raid Analysis - SWGoH">
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-5 mb-8">
    <StatCard title="Total Raids" value="0" id="totalRaids" />
    <StatCard title="Active Players" value="0" id="activePlayers" />
    <StatCard title="Average Participation" value="0%" id="avgParticipation" />
    <StatCard title="Last Raid" value="-" id="lastRaidDate" />
  </div>

  <div class="grid grid-cols-1 gap-10 mb-8">
    <ChartContainer 
      title="📊 Total Raid Points Over Time" 
      canvasId="raidTotalChart" 
      height="600px" 
    />
    
    <ChartContainer 
      title="🏆 Performance Ranking Over Time" 
      canvasId="rankingChart" 
      height="800px"
      description="Lower Position = Better Performance • Based on Score per Raid"
    />
  </div>

  <FilterControls />
  <PlayerTable />
  <RaidTable />

  <script define:vars={{ allRaidData, baseUrl }}>
    let raidData = allRaidData;
    let playerStats = new Map();
    let filteredData = [];
    let isInitialized = false;

    console.log('Script loaded, allRaidData:', allRaidData);
    console.log('Script loaded, raidData:', raidData);
    console.log('Script loaded, baseUrl:', baseUrl);

    function waitForChartJS(callback) {
      if (typeof Chart !== 'undefined') {
        callback();
      } else {
        console.log('Waiting for Chart.js to load...');
        setTimeout(() => waitForChartJS(callback), 100);
      }
    }

    function initializeApp() {
      try {
        if (isInitialized) {
          console.log('App already initialized, skipping...');
          return;
        }
        
        console.log('initializeApp called, raidData:', raidData);
        console.log('initializeApp called, raidData.length:', raidData.length);
        
        if (raidData.length === 0) {
          console.log('No raid data found, showing no-data message');
          showNoDataMessage();
          return;
        }

        console.log('Processing player stats...');
        processPlayerStats();
        console.log('Updating UI...');
        
        // Wait for Chart.js before updating UI
        waitForChartJS(() => {
          updateUI();
          isInitialized = true;
          console.log('Initialization complete');
        });

      } catch (error) {
        console.error('Error in initializeApp:', error);
        showError(error.message);
      }
    }

    function processPlayerStats() {
      playerStats.clear();
      
      const allPlayers = new Set();
      raidData.forEach(raid => {
        raid.data.forEach(player => {
          allPlayers.add(player.allycode);
        });
      });

      allPlayers.forEach(allycode => {
        const playerRaids = [];
        let name = '';
        
        raidData.forEach(raid => {
          const playerData = raid.data.find(p => p.allycode === allycode);
          if (playerData) {
            name = playerData.name;
            playerRaids.push({
              date: raid.date,
              score: playerData.lastActualScore,
              participated: playerData.participated,
              estimatedScore: playerData.estimatedScore
            });
          } else {
            playerRaids.push({
              date: raid.date,
              score: 0,
              participated: false,
              estimatedScore: 0
            });
          }
        });

        const totalRaids = raidData.length;
        const participatedRaids = playerRaids.filter(r => r.participated).length;
        const participationRate = (participatedRaids / totalRaids) * 100;
        const totalScore = playerRaids.reduce((sum, r) => sum + r.score, 0);
        const avgScore = participatedRaids > 0 ? totalScore / participatedRaids : 0;
        const bestScore = Math.max(...playerRaids.map(r => r.score));
        const lastActivity = getLastActivity(playerRaids);
        const trend = calculateTrend(playerRaids);

        playerStats.set(allycode, {
          name: name,
          allycode: allycode,
          participation: participationRate,
          raidsParticipated: participatedRaids,
          totalRaids: totalRaids,
          totalScore: totalScore,
          avgScore: avgScore,
          bestScore: bestScore,
          lastActivity: lastActivity,
          trend: trend,
          raids: playerRaids
        });
      });
    }

    function getLastActivity(playerRaids) {
      const activeRaids = playerRaids.filter(r => r.participated);
      if (activeRaids.length === 0) return 'Never';
      
      const lastActiveRaid = activeRaids[activeRaids.length - 1];
      return lastActiveRaid.date;
    }

    function calculateTrend(playerRaids) {
      const activeRaids = playerRaids.filter(r => r.participated);
      if (activeRaids.length < 2) return 'No Data';
      
      const recent = activeRaids.slice(-2);
      const diff = recent[1].score - recent[0].score;
      
      if (diff > 0) return 'Rising';
      if (diff < 0) return 'Falling';
      return 'Stable';
    }

    function updateUI() {
      try {
        console.log('updateUI: Setting totalRaids to', raidData.length);
        document.getElementById('totalRaids').textContent = raidData.length;
        
        console.log('updateUI: Setting activePlayers to', playerStats.size);
        document.getElementById('activePlayers').textContent = playerStats.size;
        
        const avgParticipation = Array.from(playerStats.values())
          .reduce((sum, p) => sum + p.participation, 0) / playerStats.size;
        console.log('updateUI: Setting avgParticipation to', avgParticipation.toFixed(1) + '%');
        document.getElementById('avgParticipation').textContent = avgParticipation.toFixed(1) + '%';
        
        const lastRaid = raidData[raidData.length - 1];
        console.log('updateUI: Setting lastRaidDate to', lastRaid.date);
        document.getElementById('lastRaidDate').textContent = lastRaid.date;

        console.log('updateUI: Creating charts...');
        createCharts();

        console.log('updateUI: Applying filters...');
        applyFilters();
        
        console.log('updateUI: Complete');
      } catch (error) {
        console.error('Error in updateUI:', error);
      }
    }

    function applyFilters() {
      const sortBy = document.getElementById('sortBy').value;
      const minParticipation = parseFloat(document.getElementById('minParticipation').value) || 0;
      const nameFilter = document.getElementById('nameFilter').value.toLowerCase();

      filteredData = Array.from(playerStats.values()).filter(player => {
        return player.participation >= minParticipation &&
               player.name.toLowerCase().includes(nameFilter);
      });

      sortData(sortBy);
      updateTable();
    }

    function sortData(criteria) {
      filteredData.sort((a, b) => {
        switch (criteria) {
          case 'name':
            return a.name.localeCompare(b.name);
          case 'participation':
            return b.participation - a.participation;
          case 'totalScore':
            return b.totalScore - a.totalScore;
          case 'avgScore':
            return b.avgScore - a.avgScore;
          case 'lastActivity':
            return new Date(b.lastActivity).getTime() - new Date(a.lastActivity).getTime();
          default:
            return b.participation - a.participation;
        }
      });
    }

    function updateTable() {
      const tbody = document.getElementById('playersTableBody');
      tbody.innerHTML = '';

      filteredData.forEach(player => {
        const row = document.createElement('tr');
        
        let participationClass = '';
        if (player.participation >= 80) participationClass = 'participation-good';
        else if (player.participation >= 50) participationClass = 'participation-warning';
        else participationClass = 'participation-poor';

        let trendClass = '';
        if (player.trend === 'Rising') trendClass = 'trend-positive';
        else if (player.trend === 'Falling') trendClass = 'trend-negative';
        else if (player.trend === 'Stable') trendClass = 'trend-stable';

        row.innerHTML = `
          <td>${player.name}</td>
          <td>${player.allycode}</td>
          <td class="${participationClass}">${player.participation.toFixed(1)}%</td>
          <td>${player.raidsParticipated}/${player.totalRaids}</td>
          <td>${formatNumber(player.totalScore)}</td>
          <td>${formatNumber(player.avgScore)}</td>
          <td>${formatNumber(player.bestScore)}</td>
          <td>${player.lastActivity}</td>
          <td class="${trendClass}">${player.trend}</td>
        `;
        tbody.appendChild(row);
      });
    }

    function formatNumber(num) {
      if (num === 0) return '-';
      return new Intl.NumberFormat('de-DE').format(Math.round(num));
    }

    function sortTable(column) {
      document.getElementById('sortBy').value = column;
      applyFilters();
    }

    function exportData() {
      let csv = 'Name,Ally Code,Participation %,Raids Participated,Total Score,Average Score,Best Score,Last Activity,Trend\n';
      
      filteredData.forEach(player => {
        csv += `"${player.name}","${player.allycode}",${player.participation.toFixed(1)},${player.raidsParticipated},${player.totalScore},${player.avgScore.toFixed(0)},${player.bestScore},${player.lastActivity},${player.trend}\n`;
      });

      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `order66_auswertung_${new Date().toISOString().split('T')[0]}.csv`;
      link.click();
    }

    function showError(message) {
      const errorDiv = document.getElementById('error');
      errorDiv.textContent = message;
      errorDiv.classList.remove('hidden');
    }

    function showNoDataMessage() {
      const errorDiv = document.getElementById('error');
      
      errorDiv.innerHTML = `
        <div class="text-center py-12">
          <div class="text-6xl mb-6">🚀</div>
          <h2 class="text-2xl font-bold text-cyan-400 mb-4">No Raid Data Found</h2>
          <div class="text-gray-300 mb-8 space-y-4">
            <p class="text-lg">To get started, you need to export your raid data from Wookiebot.</p>
            
            <div class="bg-gray-800/50 rounded-lg p-6 max-w-2xl mx-auto">
              <h3 class="text-cyan-400 font-semibold mb-3">📋 How to get your data:</h3>
              <ol class="text-left space-y-2 text-sm">
                <li><strong>1.</strong> Go to your guild's Discord server</li>
                <li><strong>2.</strong> Use the command: <code class="bg-gray-700 px-2 py-1 rounded text-cyan-300">/raid guild</code></li>
                <li><strong>3.</strong> Wookiebot will provide a CSV file download</li>
                <li><strong>4.</strong> Save the file as <code class="bg-gray-700 px-2 py-1 rounded text-cyan-300">yyyy-mm-dd.csv</code> (e.g., <code class="bg-gray-700 px-2 py-1 rounded text-cyan-300">2025-07-23.csv</code>)</li>
                <li><strong>5.</strong> Place the file in the <code class="bg-gray-700 px-2 py-1 rounded text-cyan-300">data/</code> directory</li>
                <li><strong>6.</strong> Run <code class="bg-gray-700 px-2 py-1 rounded text-cyan-300">npm run build</code> to process the data</li>
              </ol>
            </div>
            
            <div class="mt-6">
              <a href="\${baseUrl}help/" class="btn-primary inline-flex items-center gap-2">
                📚 View Detailed Help Guide
              </a>
            </div>
          </div>
        </div>
      `;
      
      errorDiv.classList.remove('hidden');
    }

    document.addEventListener('DOMContentLoaded', initializeApp);


    let raidTotalChart = null;
    let rankingChart = null;

    function createCharts() {
      // Check if Chart.js is loaded
      if (typeof Chart === 'undefined') {
        console.log('Chart.js not loaded yet, retrying in 100ms...');
        setTimeout(createCharts, 100);
        return;
      }
      
      createRaidTotalChart();
      createRankingChart();
      updateRaidTable();
    }

    function createRaidTotalChart() {
      const ctx = document.getElementById('raidTotalChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (raidTotalChart) {
        raidTotalChart.destroy();
      }
      
      const sortedRaids = raidData.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
      const labels = sortedRaids.map(raid => raid.date);
      const totalScores = sortedRaids.map(raid => {
        return raid.data.reduce((sum, player) => sum + (player.lastActualScore || 0), 0);
      });
      const participantCounts = sortedRaids.map(raid => {
        return raid.data.filter(player => player.participated).length;
      });

      raidTotalChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Total Points',
            data: totalScores,
            borderColor: '#ffd700',
            backgroundColor: 'rgba(255, 215, 0, 0.1)',
            borderWidth: 3,
            fill: true,
            tension: 0.4,
            yAxisID: 'y'
          }, {
            label: 'Number of Participants',
            data: participantCounts,
            borderColor: '#4CAF50',
            backgroundColor: 'rgba(76, 175, 80, 0.1)',
            borderWidth: 2,
            fill: false,
            tension: 0.4,
            yAxisID: 'y1'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'Raid Performance Over Time',
              color: '#ffd700',
              font: { size: 16 }
            },
            legend: {
              labels: { color: '#e0e0e0' }
            }
          },
          scales: {
            x: {
              ticks: { color: '#e0e0e0' },
              grid: { color: 'rgba(255, 255, 255, 0.1)' }
            },
            y: {
              type: 'linear',
              display: true,
              position: 'left',
              ticks: { 
                color: '#ffd700',
                callback: function(value) {
                  return new Intl.NumberFormat('de-DE').format(value);
                }
              },
              grid: { color: 'rgba(255, 215, 0, 0.1)' },
              title: {
                display: true,
                text: 'Total Points',
                color: '#ffd700'
              }
            },
            y1: {
              type: 'linear',
              display: true,
              position: 'right',
              ticks: { color: '#4CAF50' },
              grid: { drawOnChartArea: false },
              title: {
                display: true,
                text: 'Number of Participants',
                color: '#4CAF50'
              }
            }
          }
        }
      });
    }

    function createRankingChart() {
      const ctx = document.getElementById('rankingChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (rankingChart) {
        rankingChart.destroy();
      }
      
      rankingChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: raidData.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()).map(raid => raid.date),
          datasets: []
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'Performance Ranking Over Time',
              color: '#ffd700',
              font: { size: 16 }
            },
            legend: {
              display: false
            },
            tooltip: {
              mode: 'point',
              intersect: true,
              callbacks: {
                title: function(context) {
                  return context[0].label;
                },
                label: function(context) {
                  return `${context.dataset.label}: Rank #${context.parsed.y}`;
                }
              }
            }
          },
          scales: {
            x: {
              ticks: { color: '#e0e0e0' },
              grid: { color: 'rgba(255, 255, 255, 0.1)' }
            },
            y: {
              reverse: true,
              ticks: { 
                color: '#e0e0e0',
                stepSize: 1,
                callback: function(value) {
                  return '#' + value;
                }
              },
              grid: { color: 'rgba(255, 255, 255, 0.1)' },
              title: {
                display: true,
                text: 'Ranking Position',
                color: '#ffd700'
              }
            }
          },
          interaction: {
            intersect: true,
            mode: 'point'
          }
        }
      });
      
      updateRankingChart();
    }

    function updateRankingChart() {
      const sortedRaids = raidData.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
      const playerRankings = new Map();
      
      sortedRaids.forEach(raid => {
        const sortedPlayers = raid.data
          .filter(p => p.participated)
          .sort((a, b) => (b.lastActualScore || 0) - (a.lastActualScore || 0));
        
        sortedPlayers.forEach((player, index) => {
          if (!playerRankings.has(player.allycode)) {
            playerRankings.set(player.allycode, {
              name: player.name,
              rankings: []
            });
          }
          playerRankings.get(player.allycode).rankings.push({
            date: raid.date,
            rank: index + 1
          });
        });
      });
      
      const colors = [
        '#FFD700', '#C0C0C0', '#CD7F32', '#4CAF50', '#2196F3', 
        '#FF9800', '#9C27B0', '#F44336', '#00BCD4', '#8BC34A',
        '#FF5722', '#607D8B', '#E91E63', '#3F51B5', '#009688'
      ];
      
      rankingChart.data.datasets = [];
      let colorIndex = 0;
      
      const minAppearances = Math.ceil(sortedRaids.length / 2);
      
      Array.from(playerRankings.entries())
        .filter(([allycode, data]) => data.rankings.length >= minAppearances)
        .sort((a, b) => {
          const avgA = a[1].rankings.reduce((sum, r) => sum + r.rank, 0) / a[1].rankings.length;
          const avgB = b[1].rankings.reduce((sum, r) => sum + r.rank, 0) / b[1].rankings.length;
          return avgA - avgB;
        })
        .forEach(([allycode, data]) => {
          const fullRankings = sortedRaids.map(raid => {
            const ranking = data.rankings.find(r => r.date === raid.date);
            return ranking ? ranking.rank : null;
          });
          
          rankingChart.data.datasets.push({
            label: data.name,
            data: fullRankings,
            borderColor: colors[colorIndex % colors.length],
            backgroundColor: colors[colorIndex % colors.length] + '20',
            borderWidth: 2,
            fill: false,
            tension: 0.3,
            spanGaps: false,
            pointRadius: 4,
            pointHoverRadius: 6
          });
          colorIndex++;
        });
      
      rankingChart.update();
    }

    function updateRaidTable() {
      const sortBy = document.getElementById('raidTableSort').value;
      const filterText = document.getElementById('raidTableFilter').value.toLowerCase();
      const raidTableBody = document.getElementById('raidTableBody');
      
      const allPlayersData = [];
      const allRaidDates = raidData.map(raid => raid.date).sort((a, b) => new Date(a).getTime() - new Date(b).getTime());
      
      for (let [allycode, playerStat] of playerStats) {
        const playerData = {
          name: playerStat.name,
          participation: playerStat.participation,
          totalScore: playerStat.totalScore,
          avgScore: playerStat.avgScore,
          raids: {}
        };
        
        for (let raidDate of allRaidDates) {
          const raid = raidData.find(r => r.date === raidDate);
          const playerInRaid = raid ? raid.data.find(p => p.allycode === allycode) : null;
          playerData.raids[raidDate] = playerInRaid ? playerInRaid.lastActualScore : null;
        }
        
        allPlayersData.push(playerData);
      }
      
      let filteredDataLocal = allPlayersData;
      if (filterText) {
        filteredDataLocal = allPlayersData.filter(p => p.name.toLowerCase().includes(filterText));
      }
      
      filteredDataLocal.sort((a, b) => {
        switch (sortBy) {
          case 'name':
            return a.name.localeCompare(b.name);
          case 'totalScore':
            return b.totalScore - a.totalScore;
          case 'avgScore':
            return b.avgScore - a.avgScore;
          case 'participation':
            return b.participation - a.participation;
          default:
            return 0;
        }
      });
      
      let html = '';
      
      const raidAverages = {};
      for (let raidDate of allRaidDates) {
        const raidScores = allPlayersData
          .map(p => p.raids[raidDate])
          .filter(score => score !== null);
        raidAverages[raidDate] = raidScores.length > 0 ? 
          raidScores.reduce((sum, score) => sum + score, 0) / raidScores.length : 0;
      }
      
      for (let player of filteredDataLocal) {
        html += `<tr class="table-row">`;
        html += `<td class="table-cell-sticky">${player.name}</td>`;
        html += `<td class="table-cell-center">${player.participation.toFixed(1)}%</td>`;
        html += `<td class="table-cell-center-bold">${player.totalScore.toLocaleString()}</td>`;
        html += `<td class="table-cell-center">${Math.round(player.avgScore).toLocaleString()}</td>`;
        
        for (let raidDate of allRaidDates) {
          const score = player.raids[raidDate];
          const avgScore = raidAverages[raidDate];
          
          if (score === null) {
            html += `<td class="table-cell-inactive">-</td>`;
          } else {
            const isAboveAvg = score > avgScore;
            const cellClass = isAboveAvg ? 'table-cell-above-avg' : 'table-cell-below-avg';
            html += `<td class="${cellClass}">${score.toLocaleString()}</td>`;
          }
        }
        
        html += `</tr>`;
      }
      
      raidTableBody.innerHTML = html;
      
      const tableHeader = document.querySelector('#raidTable thead tr');
      const existingRaidHeaders = tableHeader.querySelectorAll('th[data-raid-date]');
      
      if (existingRaidHeaders.length === 0) {
        for (let raidDate of allRaidDates) {
          const th = document.createElement('th');
          th.setAttribute('data-raid-date', raidDate);
          th.className = 'table-header text-center min-w-[100px]';
          th.innerHTML = `${raidDate}<br><small class="text-gray-400">(Ø ${Math.round(raidAverages[raidDate]).toLocaleString()})</small>`;
          tableHeader.appendChild(th);
        }
      }
    }

    window.applyFilters = applyFilters;
    window.sortTable = sortTable;
    window.exportData = exportData;
    window.updateRankingChart = updateRankingChart;
    window.updateRaidTable = updateRaidTable;
  </script>
</Layout>
