---
import type { PlayerRaidEntry } from '../types/raid.ts';

interface Props {
  playerHistory: PlayerRaidEntry[];
  playerName: string;
}

const { playerHistory, playerName } = Astro.props;

// Group raids by month for heatmap
const monthlyData = new Map<string, { raids: any[] }>();

playerHistory
  .filter(r => r.estimatedScore > 0 || r.score > 0) // Only raids where player was in guild
  .forEach(raid => {
    const date = new Date(raid.date);
    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
    
    if (!monthlyData.has(monthKey)) {
      monthlyData.set(monthKey, { raids: [] });
    }
    
    const monthData = monthlyData.get(monthKey)!;
    const efficiency = raid.participated && raid.estimatedScore > 0 
      ? (raid.score / raid.estimatedScore) * 100 
      : 0;
    
    monthData.raids.push({
      date: raid.date,
      day: date.getDate(),
      score: raid.score,
      participated: raid.participated,
      estimatedScore: raid.estimatedScore,
      efficiency: efficiency
    });
  });

// Sort months chronologically
const sortedMonths = Array.from(monthlyData.entries())
  .sort((a, b) => a[0].localeCompare(b[0]))
  .slice(-12); // Show last 12 months

function getMonthName(monthKey: string): string {
  const [year, month] = monthKey.split('-');
  const date = new Date(parseInt(year), parseInt(month) - 1);
  return date.toLocaleDateString('de-DE', { month: 'short', year: 'numeric' });
}

function formatNumber(num: number): string {
  if (num === 0) return '0';
  return new Intl.NumberFormat('de-DE').format(Math.round(num));
}

function getHeatmapColor(efficiency: number, participated: boolean): string {
  if (!participated) return 'bg-gray-700';
  if (efficiency === 0) return 'bg-red-900';
  
  // Color based on efficiency percentage
  if (efficiency >= 110) return 'bg-purple-500'; // Overperforming
  if (efficiency >= 100) return 'bg-green-500';  // Meeting expectation
  if (efficiency >= 90) return 'bg-green-600';   // Slightly below
  if (efficiency >= 80) return 'bg-yellow-600';  // Below expectation
  if (efficiency >= 60) return 'bg-orange-600';  // Significantly below
  return 'bg-red-600';                           // Far below expectation
}

// Calculate average efficiency for display
const participatedRaids = playerHistory.filter(r => r.participated && r.estimatedScore > 0);
const avgEfficiency = participatedRaids.length > 0
  ? participatedRaids.reduce((sum, r) => sum + (r.score / r.estimatedScore) * 100, 0) / participatedRaids.length
  : 0;
---

<div class="glass-card p-5">
  <h2 class="text-heading mb-3 sm:mb-5 text-center text-sm sm:text-xl">üóìÔ∏è Participation Heatmap (Last 12 Months)</h2>
  
  <div class="text-center text-sm text-gray-400 mb-4">
    Each cell represents a raid. Colors indicate your efficiency (actual score vs estimated score).
    <br />
    Your average efficiency: <span class="text-cyan-400 font-semibold">{avgEfficiency.toFixed(1)}%</span>
    <br />
    Hover over cells to see exact dates and scores.
  </div>
  
  <div class="overflow-x-auto">
    <div class="min-w-[600px] space-y-3">
      {sortedMonths.map(([monthKey, monthData]) => (
        <div class="flex items-center gap-3">
          <div class="text-gray-400 text-sm w-20 text-right">
            {getMonthName(monthKey)}
          </div>
          <div class="flex gap-1 flex-1">
            {Array.from({ length: 31 }, (_, i) => {
              const day = i + 1;
              const raid = monthData.raids.find(r => r.day === day);
              
              if (!raid) {
                return <div class="w-6 h-6 bg-gray-800 rounded-sm"></div>;
              }
              
              const color = getHeatmapColor(raid.efficiency, raid.participated);
              const tooltip = raid.participated 
                ? `Day ${day}: ${new Intl.NumberFormat('de-DE').format(Math.round(raid.score))} (${raid.efficiency.toFixed(0)}% efficiency)`
                : `Day ${day}: Did not participate`;
              
              return (
                <div 
                  class={`w-6 h-6 ${color} rounded-sm cursor-pointer hover:opacity-80 transition-opacity heatmap-cell`}
                  title={tooltip}
                  data-score={raid.score}
                  data-date={raid.date}
                  data-participated={raid.participated}
                  data-efficiency={raid.efficiency}
                ></div>
              );
            })}
          </div>
        </div>
      ))}
    </div>
    
    <!-- Legend -->
    <div class="mt-6 flex flex-col items-center gap-2">
      <div class="flex items-center justify-center gap-4 text-xs">
        <span class="text-gray-400">Low</span>
        <div class="flex gap-1">
          <div class="w-4 h-4 bg-red-600 rounded-sm" title="< 60% efficiency"></div>
          <div class="w-4 h-4 bg-orange-600 rounded-sm" title="60-80% efficiency"></div>
          <div class="w-4 h-4 bg-yellow-600 rounded-sm" title="80-90% efficiency"></div>
          <div class="w-4 h-4 bg-green-600 rounded-sm" title="90-100% efficiency"></div>
          <div class="w-4 h-4 bg-green-500 rounded-sm" title="100-110% efficiency"></div>
          <div class="w-4 h-4 bg-purple-500 rounded-sm" title="> 110% efficiency"></div>
        </div>
        <span class="text-gray-400">High</span>
        <div class="ml-4 flex gap-2">
          <div class="flex items-center gap-1">
            <div class="w-4 h-4 bg-gray-700 rounded-sm"></div>
            <span class="text-gray-400">Not participated</span>
          </div>
        </div>
      </div>
      <div class="text-xs text-gray-500">
        Efficiency: Actual Score / Estimated Score
      </div>
    </div>
  </div>
</div>

<style>
  .heatmap-cell {
    position: relative;
  }
  
  .heatmap-cell:hover::after {
    content: attr(title);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.9);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    white-space: nowrap;
    font-size: 12px;
    z-index: 10;
    pointer-events: none;
    margin-bottom: 4px;
  }
  
  .heatmap-cell:hover::before {
    content: '';
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 4px solid transparent;
    border-top-color: rgba(0, 0, 0, 0.9);
    z-index: 10;
    pointer-events: none;
  }
</style>

<script>
  // Add interactive tooltips with better positioning
  document.addEventListener('DOMContentLoaded', () => {
    const cells = document.querySelectorAll('.heatmap-cell');
    
    cells.forEach(cell => {
      cell.addEventListener('mouseenter', (e) => {
        const target = e.target as HTMLElement;
        const score = target.dataset.score;
        const date = target.dataset.date;
        const participated = target.dataset.participated === 'true';
        const efficiency = target.dataset.efficiency;
        
        if (date) {
          const formattedDate = new Date(date).toLocaleDateString('de-DE', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
          });
          
          let tooltip = `${formattedDate}`;
          if (participated && score) {
            tooltip += `: ${new Intl.NumberFormat('de-DE').format(parseInt(score))}`;
            if (efficiency) {
              tooltip += ` (${parseFloat(efficiency).toFixed(0)}% efficiency)`;
            }
          } else {
            tooltip += ': Did not participate';
          }
          
          target.setAttribute('title', tooltip);
        }
      });
    });
  });
</script>