---
import ChartContainer from './ChartContainer.astro';
import type { RaidData } from '../types/raid.ts';

interface Props {
  raidData: RaidData[];
}

const { raidData } = Astro.props;
---

<ChartContainer 
  title="🏆 Performance Points Over Time" 
  canvasId="rankingChart"
  description="Player scores per raid • Higher values = better performance"
/>

<script define:vars={{ raidData }}>
  let rankingChart = null;

  // Helper function to get CSS custom property values
  function getCSSVariable(variable) {
    return getComputedStyle(document.documentElement).getPropertyValue(variable).trim();
  }

  // Get theme colors from CSS variables
  const themeColors = {
    primary: getCSSVariable('--color-primary'),
    secondary: getCSSVariable('--color-secondary'),
    primaryRgb: getCSSVariable('--color-primary-rgb'),
    secondaryRgb: getCSSVariable('--color-secondary-rgb'),
    primaryAlpha: (alpha) => `rgba(${getCSSVariable('--color-primary-rgb')}, ${alpha})`,
    secondaryAlpha: (alpha) => `rgba(${getCSSVariable('--color-secondary-rgb')}, ${alpha})`
  };

  function waitForChartJS(callback) {
    if (typeof Chart !== 'undefined') {
      callback();
    } else {
      setTimeout(() => waitForChartJS(callback), 100);
    }
  }

  function createRankingChart() {
    const ctx = document.getElementById('rankingChart').getContext('2d');
    
    // Destroy existing chart if it exists
    if (rankingChart) {
      rankingChart.destroy();
    }
    
    rankingChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: [],
        datasets: []
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          title: {
            display: false
          },
          legend: {
            display: false
          },
          tooltip: {
            mode: 'point',
            intersect: true,
            callbacks: {
              title: function(context) {
                return context[0].label;
              },
              label: function(context) {
                return `${context.dataset.label}: ${new Intl.NumberFormat('de-DE').format(context.parsed.y)} points`;
              }
            }
          }
        },
        scales: {
          x: {
            ticks: { color: '#e0e0e0' },
            grid: { color: 'rgba(255, 255, 255, 0.1)' }
          },
          y: {
            ticks: { 
              color: '#e0e0e0',
              callback: function(value) {
                return new Intl.NumberFormat('de-DE').format(value);
              }
            },
            grid: { color: 'rgba(255, 255, 255, 0.1)' },
            title: {
              display: true,
              text: 'Points',
              color: themeColors.primary
            }
          }
        },
        interaction: {
          intersect: true,
          mode: 'point'
        }
      }
    });
    
    updateRankingChart();
  }

  function updateRankingChart() {
    // Only use last 5 raids for charts
    const sortedRaids = raidData.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
    const last5Raids = sortedRaids.slice(-5);
    
    // Update chart labels with last 5 raids
    rankingChart.data.labels = last5Raids.map(raid => raid.date);
    
    const playerScores = new Map();
    
    last5Raids.forEach(raid => {
      raid.data.forEach(player => {
        // Include all players in raid data (participated or not)
        if (!playerScores.has(player.allycode)) {
          playerScores.set(player.allycode, {
            name: player.name,
            scores: []
          });
        }
        // Add score (0 if didn't participate, actual score if participated)
        playerScores.get(player.allycode).scores.push({
          date: raid.date,
          score: player.participated ? (player.lastActualScore || 0) : 0
        });
      });
    });
    
    const colors = [
      themeColors.secondary, '#C0C0C0', '#CD7F32', themeColors.secondary, themeColors.primary, 
      '#FF9800', '#9C27B0', '#F44336', '#00BCD4', themeColors.primary,
      '#FF5722', '#607D8B', '#E91E63', '#3F51B5', '#009688'
    ];
    
    rankingChart.data.datasets = [];
    let colorIndex = 0;
    
    const minAppearances = Math.ceil(last5Raids.length / 2);
    
    Array.from(playerScores.entries())
      .filter(([allycode, data]) => data.scores.length >= minAppearances)
      .sort((a, b) => {
        const avgA = a[1].scores.reduce((sum, r) => sum + r.score, 0) / a[1].scores.length;
        const avgB = b[1].scores.reduce((sum, r) => sum + r.score, 0) / b[1].scores.length;
        return avgB - avgA;
      })
      .forEach(([allycode, data]) => {
        const fullScores = last5Raids.map(raid => {
          const scoreEntry = data.scores.find(r => r.date === raid.date);
          return scoreEntry ? scoreEntry.score : null;
        });
        
        rankingChart.data.datasets.push({
          label: data.name,
          data: fullScores,
          borderColor: colors[colorIndex % colors.length],
          backgroundColor: colors[colorIndex % colors.length] + '20',
          borderWidth: 2,
          fill: false,
          tension: 0.3,
          spanGaps: false,
          pointRadius: 4,
          pointHoverRadius: 6
        });
        colorIndex++;
      });
    
    rankingChart.update();
  }

  // Initialize chart when Chart.js is loaded
  function initRankingChart() {
    waitForChartJS(createRankingChart);
  }

  // Auto-initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initRankingChart);
  } else {
    initRankingChart();
  }

  // Make chart and update function available globally
  window.rankingChart = () => rankingChart;
  window.updateRankingChart = updateRankingChart;
</script>
